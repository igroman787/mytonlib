#!/usr/bin/env python3
# -*- coding: utf_8 -*-

import sys
import json
import time
from .adnl import AdnlTcpClient, AdnlUdpClient
from .balancer import AdnlTcpClientWithBalancer
from .mytypes import Cell, Slice, Dict
from .scanner import TonBlocksScanner
from .boc import deserialize_boc
from .tvm.tvm import TVM
from .tlb import TlbSchemes


def test_lite_client():
	"""
	Test commands from lite-client
	"""

	global_config_url = "https://ton-blockchain.github.io/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)

	# time - Get server time
	data = adnl.get_time()
	print("get_time:", data)

	# last - Get last block and state info from server
	mc_info = adnl.get_masterchain_info()
	print("get_masterchain_info:", mc_info)
	print(f"mc_info.last.seqno: {mc_info.last.seqno}")

	# getaccount - Loads the most recent state of specified account
	data = adnl.get_account_state("EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N")
	print("get_account_state:", data)
	
	# runmethod - Runs GET method <method-id> of account <addr> with specified parameters
	data = adnl.run_smc_method("EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N", "seqno")
	print("run_smc_method:", data)
	
	# dnsresolve - Resolves a domain starting from root dns smart contract
	#*
	
	# dnsresolvestep - Resolves a subdomain using dns smart contract <addr>
	
	
	# allshards - Shows shard configuration from the most recent masterchain state or from masterchain state corresponding to <block-id-ext>
	data = adnl.get_all_shards_info()
	print("get_all_shards_info:", data)
	
	# getconfig [<param>...]  Shows specified or all configuration parameters from the latest masterchain state
	data = adnl.get_config_params(4)
	print("get_config_params:", data)
	
	# gethead - Shows block header for <block-id-ext>
	data = adnl.get_block_header()
	print("get_block_header:", data)
	
	# getblock - Downloads block
	block_info = adnl.get_block()
	print("get_block:", block_info)
	
	# DELETE
	# getstate - Downloads state corresponding to specified block
	#data = adnl.get_state()
	#print("get_state:", json.dumps(data, indent=4))
	
	# lasttrans - Shows or dumps specified transaction and several preceding ones
	data = adnl.get_last_transactions("EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N", 1)
	print("get_last_transactions:", data)
	
	# listblocktrans - Lists block transactions, starting immediately after or before the specified one
	block_trans = adnl.get_block_transactions(mc_info.last)
	print("get_block_transactions:", data)
	
	# dumptrans - Dumps one transaction of specified account
	account_id = {"workchain": mc_info.last.workchain, "id": block_trans[0].account}
	data = adnl.get_one_transaction(mc_info.last, account_id, block_trans[0].lt)
	print("get_one_transaction:", data)
	
	# byseqno - Looks up a block by workchain, shard and seqno, and shows its header
	data = adnl.lookup_block(mc_info.last.workchain, mc_info.last.shard, mc_info.last.seqno-10)
	print("byseqno:", data)
	
	# bylt - Looks up a block by workchain, shard and logical time, and shows its header
	data = adnl.lookup_block(mc_info.last.workchain, mc_info.last.shard, lt=block_info.info.start_lt)
	print("bylt:", data)
	
	# byutime - Looks up a block by workchain, shard and creation time, and shows its header
	data = adnl.lookup_block(mc_info.last.workchain, mc_info.last.shard, utime=block_info.info.gen_utime-100)
	print("byutime:", data)
	
	# creatorstats - Lists block creator statistics by validator public key
	
	
	# recentcreatorstats - Lists block creator statistics updated after <start-utime> by validator public key
	
	
	# checkload - Checks whether all validators worked properly during specified time interval, and optionally saves proofs into <savefile-prefix>-<n>.boc
	#*
	
	# loadproofcheck - Checks a validator misbehavior proof previously created by checkload
	#*
	
	# pastvalsets     Lists known past validator set ids and their hashes
	
	
	# savecomplaints - Saves all complaints registered for specified validator set id into files <filename-pfx><complaint-hash>.boc
	#*
	
	# complaintprice - Computes the price (in nanograms) for creating a complaint
	
	
	# sendfile - Load a serialized message from <filename> and send it to server
	body = bytes.fromhex("b5ee9c7241010101000e0000180000000400000000628f328d83ad456c")
	data = adnl.send_ext_msg(body)
	print("send_ext_msg:", data)
#end define

def test_udp():
	host = "172.104.59.125"
	port = 14432
	pubkey = "/YDNd+IwRUgL0mq21oC0L3RxrS8gTu0nciSPUrhqR78="
	
	adnl = AdnlUdpClient()
	adnl.connect(host, port, pubkey)
#end defines

def test_cell():
	cell = Cell()
	cell.data = bytes.fromhex("010203")
	cell.bits_len = len(cell.data) * 8
	print("cell:", cell)
	print("cell_json:", json.dumps(cell, indent=4))
	
	slice = Slice(cell)
	print("slice:", slice)
	print("slice_json:", json.dumps(slice, indent=4))
	
	r1 = slice.compare_byte_prefix("01", move_pos=True)
	r2 = slice.compare_byte_prefix("02", move_pos=False)
	print(f"is slice has prefix `01`: {r1}")
	print(f"is slice has prefix `02`: {r2}")
	print(f"slice: {slice}")
#end define

def test_config(papam=32):
	global_config_url = "https://ton-blockchain.github.io/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	
	data = adnl.get_config_params(papam)
	print("get_config_params:", json.dumps(data, indent=4))
#end define

def test_run_smc_method():
	global_config_url = "https://ton-blockchain.github.io/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	
	data = adnl.run_smc_method("Ef9X6ObXojpUZza3NiS2TnRJ4KR7ler8cOjMRBt_swy4Qp2j", "seqno")
	print("seqno:", data)
#end define

def test_run_smc_method2():
	global_config_url = "https://ton-blockchain.github.io/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	
	data = adnl.run_smc_method("kQBL2_3lMiyywU17g-or8N7v9hDmPCpttzBPE2isF2GTziky", "mult", [5, 4])
	print("run_smc_method:", data)

	tlb_schemes = TlbSchemes()
	tlb_schemes.load_schemes("/usr/src/ton/tl/generate/scheme/")
	
	tlb_schemes.load_schemes_from_text("mycell$_ value:uint64 = MyCell;")
	data = tlb_schemes.deserialize(data, expected="MyCell")
	print("data:", data)
	print("data.value:", data.value)
#end define

def test_run_smc_method3():
	global_config_url = "https://ton-blockchain.github.io/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	
	smc_addr = "Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn"
	mc_info = adnl.get_masterchain_info()
	block_id_ext = adnl.lookup_block(workchain=mc_info.last.workchain, shard=mc_info.last.shard, utime=1677006000)
	data = adnl.run_smc_method(smc_addr, "list_proposals", block_id_ext=block_id_ext)
	print("mc_info:", json.dumps(mc_info, indent=4))
	print("block_id_ext:", json.dumps(block_id_ext, indent=4))
	print("run_smc_method:", data)
#end define

def test_run_smc_method4():
	global_config_url = "https://ton-blockchain.github.io/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	
	smc_addr = "Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn"
	mc_info = adnl.get_masterchain_info()
	block_id_ext = adnl.lookup_block(workchain=mc_info.last.workchain, shard=mc_info.last.shard, utime=1677006000)
	data = adnl.run_smc_method_local(smc_addr, "list_proposals", block_id_ext=block_id_ext)
	print("mc_info:", json.dumps(mc_info, indent=4))
	print("block_id_ext:", json.dumps(block_id_ext, indent=4))
	print("run_smc_method:", data)
#end define

def test_scanner():
	global_config_url = "/usr/bin/ton/local.config.json"
	#global_config_url = "https://ton-blockchain.github.io/global.config.json"
	#global_config_url = "https://ton-blockchain.github.io/testnet-global.config.json"
	#global_config_url = "https://igroman787.github.io/perfnet.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	scanner = TonBlocksScanner(adnl, sync=False)
	mc_info = adnl.get_masterchain_info()
	#scanner.set_start_block(-1, -9223372036854775808, 7850100) # boc error
	#scanner.set_start_block(-1, -9223372036854775808, 7850386) # start tps test
	#scanner.set_start_block(-1, -9223372036854775808, 28111292) # mainnet
	scanner.set_start_block(mc_info.last.workchain, mc_info.last.shard, mc_info.last.seqno-1000)
	scanner.run()
	
	old_blocks_num = 0
	old_trans_num = 0
	old_messages_num = 0
	while True:
		dtime = 60
		bps = round((scanner.blocks_num - old_blocks_num) /dtime, 2)
		tps = round((scanner.trans_num - old_trans_num) /dtime, 2)
		mps = round((scanner.messages_num - old_messages_num) /dtime, 2)
		old_blocks_num = scanner.blocks_num
		old_trans_num = scanner.trans_num
		old_messages_num = scanner.messages_num
		print(f"bps: {bps}, tps: {tps}, mps: {mps}. bnum:{scanner.blocks_num}, tnum: {scanner.trans_num}, mnum: {scanner.messages_num}")
		time.sleep(dtime)
#end define

def test_proposals_list():
	global_config_url = "/usr/bin/ton/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	
	mc_info = adnl.get_masterchain_info()
	block_id_ext = adnl.lookup_block(workchain=mc_info.last.workchain, shard=mc_info.last.shard, seqno=28391437)
	data = adnl.run_smc_method("Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn", "list_proposals", block_id_ext=block_id_ext)
	print("mc_info:", json.dumps(mc_info, indent=4))
	print("block_id_ext:", json.dumps(block_id_ext, indent=4))
	print("run_smc_method:", data)
#end define

def test_boc():
	boc1 = bytes.fromhex("")
	
	boc2 = bytes.fromhex("b5ee9c7201028a01000f180003b571c8f119834f94290def0957a0b5a6bf4bd9058321644ad95ef24bc5e72bdf990000020c7ca066f0300000000000000000000000000000000000000000000000000000000000000000000000000000000641063300001c62a82d080102030101a00400827290aec8965afabb16ebc3cb9b408ebae71b618d78788bc80d09843593cac98da4b0bd94d633b8b2e45c25fde8b1352004e31cd9bd40426797782ed082179c22450215040903b9aca01862a82d111e1f04b368007ceb454d9c98f33966149f1d721fff5d9438400a625ce18f657be316fe63d0b5000723c4660d3e50a437bc255e82d69afd2f64160c85912b657bc92f179caf7e64103b9aca00080303cba20000418f940cde04c820c6611905060e070114ff00f4a413f4bcf2c80b08008404003e75a2a6ce4c799cb30a4f8eb90fffaeca1c2005312e70c7b2bdf18b7f31e85a15d99b10ce8fa22d022c013f7f744564695264265ffaa902c24a610f6a4168ec02c380001ff3fbb167701ae1d1d4e69a4c5ebc37a98309866a6b7e6321bace810c53cf500000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000002faf0802090a0046d3ed44d075d721fa408307d721d102d0d30331fa403058c705f288d4d4d101fb04ed540101c00b0201621a1b0201200c0d0105bd8974200105bf5ebc0e0114ff00f4a413f4bcf2c80b0f02016210110202ca121302012014150201204142020120595a0111bdad9ed9e2a81f81845302012016170201581819010db8196db3cf031853010db1acb6cf3c0ca053004db2f4609c173b0f574b2b9ec7a13b0e7592a146d9a09c27758d4b4ad91f2cc8b4ebcb7f7c588e600201201c1d0083bfb1749396e50422deafd90f10287d3f973f88ebdc61711ae49dffc52dac285e700000000000000000000000000000000000000000000000000000000000000019400082bf6d5c807e33e28b204659581ae3122cf720ec896e5e3213ee4bb9de2207f9cb8e00000000000000000000000000000000000000000000000000000000000000af0082bf56f2904a7be2b807411872692e3cf85071fe3221ba685bedf8773df123c9c98e00000000000000000000000000000000000000000000000000000000000000af009e40ae2c0f424000000000000000001b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005bc0000000000002000200000000359b2e775d6e07513a1fdf5fecad9ee4976834d81246b96b473809b780026bd6040114ff00f4a413f4bcf2c80b2102016222230202cb24250201203d3e0201ce26270201202c2d049b3b68bb7edc0875d27087e54c0835c2c7f780b434c0c05c6c3000645fe45c38807e900894199bc13e1840a456f8082084251aa62daea3e4cc36cf01b6cf0c44158411440d104c3c06f6cf383000203f282b29000b081bbcb420200020d31f018210946a98b6baf2e081d33f0103be8fd7f9012082f0cc49ce12f102c48470d91cfdfed07d9c8207f1338503bbd19198632e6c84e5b9ba8f0930db3cf019db3cdb31e082f0cb30be6318277305456e98f5e118901f7631cc861491d5a0f6da402bde50286abae3029130e2f2c0823f2b2a0210db3cf01adb3cdb313f2b0118c8f84201cc5550db3cc9ed546b0201582e2f02014837380201203031020120333402f7321c4072805401c072801c007280940173c59400fe809c00729a08dbacc95bacec63919fc07280321c0072801c007280091bace69fc07280013c00540133258d00dc00728038891bace69fc07280013c00540133258d00dc007280389c007280009fc0728000b2563325ccccc05c00728038885bacf8c3f2407ec020326401411c3232c7dbc0005be31b5be30076cf1bc8807264c85bace5805bc89673327a0c607000127f01ca0001f00101cc011f1c1c20402808f6cf0a55481b5b7c05203500351c1c20402822e95195c9b5a5b985d195923c054a55481b5b7c0520010ac801db3cc9360016821017e7b8d358cb1ff400020120393a0201203b3c000517c16000cb3e105bc90408d7c0fe9120802b4580b00004bcbd204040551580148c104cfd031be8650075c00c2496db78a0802204485bacfcbd204ad70070c03cbd00e92040405c0844120408c409885ba556d67d168c26320073c0104cfd10b894c8efa5013c058137812000cb3e105bc90408d7c0fe9120802b4580b00004bcbd204040551580148c104cfd031be8650075c00c2496db78a0802204485bacfcbd204ad70070c03cbd00a92040405c0844120408c409485ba556d67d168c26320073c0104cfd10b894c4efa5013c05c137812000030c20010dbe28eed9e780c43f0071bdde8c1382e761eae96573d8f42761ceb25428db341384eeb1a9695b23e599169d796fef8b11cc13820673ab4f38afce928580eb0b71323d940116ed44d0d401f862db3c6c16400046fa400101f404810101d700810101d700d401d0810101d700f4043010261025102410230201204344020272575802014845460011b8b3e81adf43b860db049f4eda2edfb7021d749c21f953020d70b1fde02d0d3030171b0c001917f9170e201fa402250666f04f86102915be020821017e7b8d3ba8f8f30db3c04db3c3110344130f033db3ce020821013ff04dbba853475448000b4206ef2d08080020d31f01821017e7b8d3baf2e081f4040104388f9130db3c04db3c32104510344300f034db3ce020821023d421e1ba5349544a0024d31f01821013ff04dbbaf2e081d33ff4045904348f8f30db3c04db3c3110344130f039db3ce020821074bb3427ba534b544c0020d31f01821023d421e1baf2e081d33f0104288f8f30db3c04db3c3110344130f03adb3ce0c000534d544e0020d31f01821074bb3427baf2e081d33f01010e9130e30df2c0824f04f8f9012082f0088498875f54c5f944f42d323f454dea2c39c21a7288b107cfbf31c5746228dfba8f0930db3cf035db3cdb31e02082f0c1c11d1f7fd92f290d981a0199b5192a8987f40e1ee7bf341a386bae13dbc5e5bae3022082f0250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbcaba53545051021230db3cf036db3cdb31535403628f0930db3cf037db3cdb31e082f005a0b75ac6180d673399ec546c374c22ad7b54bfcf16d736fc78e9e173d87372bae3025354520210db3cf038db3cdb3153540116ed44d0d401f862db3c6c14550118c8f84201cc5530db3cc9ed54560024fa400101f404810101d700810101d700553000225043cf16f40012810101cf00810101cf0000df3208704026200b4072c1c068c07788608e0c9f2c9cd04674edea6a876e63881c081c6385011eaa43298c096a04a8012a81c0a9087000114c398c0cea80b3c0638adbc01c238448deaa42049be3006900deaa4108300005398cc8a940e714c09be0698c1632c1c0a956790c0c78b2742000db0830404870936c7cb421b208b04026200b4072c1c0a8c0b79fdc1bc0012386c11eaa43083000148c2c2ce6dc0ce98c051be301290100e44c388139006ce5c0a00b9be300a937a38400deaa43298c04dbe300e908b000040d398cc8a940e694c49be04072c1c0a940b91b087274200201205b5c02012071720023ffc21b74bfc12fc0abffc31ef10d0fc08d040201205d5e0201205f60020120676802012061620201206566004b1c16721c0072c05cc072c05c0072c004b333327e40321c8072c05c0072c004b281f2fff2742002f7321c4072805401c072801c007280940173c59400fe809c00729a08dbacc95bacec63919fc07280321c0072801c007280091bace69fc07280013c00940133258d00dc00728038891bace69fc07280013c00940133258d00dc007280389c007280009fc0728000b2563325ccccc05c00728038885bacf8c3f2407ec020636400127f01ca0001f00201cc000a317001ca000005327420001f1d3232c084b281f2fffc0abe90004c60020120696a0201206c6d00071e7c056001191c1481b23301840d1636cf32606b003a5065cf1613f400810101cf00810101cf0002c8810101cf00f400c901cc004f01343d010c1b40604c4b8060043d03dbe87cb821c0604c4b8880a0043d05f23d0032554c017c0b60013108aa4108aa083040644c3808e040407d211be96422ba17c0e06e046001f002810101d700307022f002f02b70c8cb1f6f00016f8c6d6f8c22f014db3c8b12f8db3c26f014db3c8b4206f662087070706f039adb3c24f02cdb3c8d05c80a1dda185b195cc81c995d995b9d59481cda185c994a60db3c705357a9045004a870026f2201c993216eb396016f2259ccc9e831126d6df029f00224810101f4786fa570707000ba20d74a21d7499720c20022c200b18e4a036f22807f22cf31ab02a105ab025155b60820c2009c20aa0215d7185033cf164014de596f025341a1c20099c8016f025044a1aa028e123133c20099d430d020d74a21d749927020e2e2e85f030201207374020148868702012075760201207d7e0201207778020120797a00470d16c07e910c60404059904cfd031be8650075c00c2496db78a050d9485bacfcbd3c00a000450408d7c0dc086040407d211be94ca440678069007c0088a040407d1e1be94cba0c0c6000133c0c5cea75801cad8260029f3e105bc90408d7c0fe10be0a151dd949fc0c94dd3c0b806080209040bc0a04b1c17cbd1c2040405518887c0336cf24c81bace3a6081bbcb4201bc94510cc1b5b7c0a690860404048bc0336cf3a17c0e07b7b011a206e92306de0d0db3c6c156f057c0026fa400101810101d700810101d700d200d455400201207f82020120828301ad3e105bc90c0cbe910c60404054c1d40cd04cfd031be8650075c00c2496db78a050d9405bacfcbd2080309a406084017d78402f3cbd3e10be0a151dd949fc0c9540949c3c0b973c0a1c1c201001b6cf178c900cc13c0a6080010ac801db3cc98100168210946a98b658cb1fcb3f00012001b93e105bc90408d7c0fe910c60404054c1140cd04cfd031be8650075c00c2496db78a050d9405bacfcbd204e603e09dbc408a86084017d78402f3cbd1c1c48208c40000000000000603c09e0840ee6b2801c36cf1b5b4a1451910d3c0a6084010cc85520db3cc98500268210da803efd5004cb1f12cb3f01fa0201fa020201208889002f430f8416f24135f03821005f5e100a120c1019130e0f02f8002d3e105bc904d7c0e084017d784028483040644c383c0be0002f0c3e105bc904d7c0e084017d784028483040644c383c0be0")
	
	cells1 = deserialize_boc(boc1)
	print(f"cells1: {cells1}")
	cells2 = deserialize_boc(boc2)
	print(f"cells2: {cells2}")
#end define

def test_tvm():
	global_config_url = "/usr/bin/ton/local.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	accoun_state = adnl.get_account_state("EQDeyWNhx_32hP6KlPYdWA8hov28_8XBScTlyz_6YZc-aqNs")
	message_cell = Cell(bytes.fromhex("0AF667A99CA0CBCC036EAF9094450F56EDDA12879C3A1F89D8E9F1D875CA43990D8CBB9D96B5F915D39461DBD8AF04440FF10CC73F475265AC4B2C1B143138000000000103"))
	message_cell2 = Cell(bytes.fromhex("627FA08D8AABA06112661A477E0409F1CE4F93E2F07B041903087C73E774D64F8BDA987A120000000000000000000000000000"))
	message_cell.add_ref(message_cell2)
	message_balance = 1000
	selector = -1 # External message
	
	import hashlib
	from nacl.signing import SigningKey
	priv_key_bytes = bytes.fromhex("c166215045844e6b9d1b3396e18af7ba4616e1f70d340fb81ac14647e8dfe97c")
	hash_bytes = bytes.fromhex("7f7cd050cca0573a113a12c85965765a0a091c1f95a95b605dd3b1933ffe49fe")
	hash_bytes2 = hashlib.sha256(hash_bytes).digest()
	signing_key = SigningKey(priv_key_bytes)
	signature_bytes = signing_key.sign(hash_bytes)
	signature_bytes2 = signing_key.sign(hash_bytes2)
	verify_key_bytes  = signing_key.verify_key.encode()
	print("verify_key:", verify_key_bytes.hex())
	print("signature_bytes:", signature_bytes.hex())
	print("signature_bytes2:", signature_bytes2.hex())
	print("hash_bytes:", hash_bytes.hex())
	print("hash_bytes2:", hash_bytes2.hex())
	print("cell_hash:", message_cell.hash().hex)
	
	tvm = TVM(accoun_state=accoun_state, message_balance=1000, message_cell=message_cell, selector=selector)
	tvm.run()
#end define

def test_tvm2():
	global_config_url = "/usr/bin/ton/global.config.json"
	adnl = AdnlTcpClientWithBalancer(global_config_url)
	accoun_state = adnl.get_account_state("Ef9X6ObXojpUZza3NiS2TnRJ4KR7ler8cOjMRBt_swy4Qp2j")
	
	tlb_schemes = TlbSchemes()
	tlb_schemes.load_schemes("/usr/src/ton/tl/generate/scheme/")
	message_cell = tlb_schemes.serialize(required="VmStack", params=[])
	method_name = "seqno"
	selector = AdnlTcpClient.get_method_id(None, method_name)
	
	tvm = TVM(accoun_state=accoun_state, message_cell=message_cell, selector=selector)
	result = tvm.run()
	print("result:", result)
#end define

def test_cell_hash():
	cell_boc = bytes.fromhex("b5ee9c7241010101000a00000f00000000000000dfabfb4138")
	true_cell_hash = bytes.fromhex("5ab26fa9292eb08bf90b95532c83ece61380e1bd6b04ea2125202b2cab17035d")
	cell = deserialize_boc(cell_boc)
	cell_hash = cell.hash()
	cell_json = json.dumps(cell, indent=4)
	print("cell:", cell)
	print("cell_json:", cell_json)
	print("cell_hash:", cell_hash.hex, cell_hash==true_cell_hash)
	print("--- --- ---")
	
	cell_boc = bytes.fromhex("b5ee9c7241010401002b00010f000000000000061301010f000000000000029b02010f000000000017910703000f00000000000000df71dae7b7")
	true_cell_hash = bytes.fromhex("bb2509fe3cff8f1faae19213774d218c018f9616cd397850c8ad9038db84eaa9")
	cell = deserialize_boc(cell_boc)
	cell_hash = cell.hash()
	cell_json = json.dumps(cell, indent=4)
	print("cell:", cell)
	print("cell_json:", cell_json)
	print("cell_hash:", cell_hash.hex, cell_hash==true_cell_hash)
#end define
